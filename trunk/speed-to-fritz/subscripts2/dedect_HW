#!/bin/bash
# function funct_read_config VARIABLE VAR_BY_REF RC_PATH                
#                                                                       
# Reads value of 'VARIABLE' from source file (rc.init or rc.conf,       
# respectively) and returns the result in VAR_BY_REF.                   
# If no match for VARIABLE is found, VAR_BY_REF is not altered. Hence   
# any preset or default value of VAR_BYR_REF is maintained.             
#                                                                       
# rc.conf is processed only in case rc.init is not present (which might 
# be the case for AVM's future or 'Labor' firmware releases).           

function funct_read_config()
{
	if [ -n "$1" ]; then
		if [ -e "$3/rc.init" ] && `grep -e "HW=[0-9]* OEM=all" "$3/rc.init" | grep -q "$1="` ; then
			VAL=`grep -e "HW=[0-9]* OEM=all" "$3/rc.init" | grep -m 1 -o -e "$1=.*" | awk -F "[= ]" '{print $2}'`
			eval "export $2=$VAL"
		elif [ -e "$3/rc.conf" ] && `cat "$3/rc.conf" | grep -q "export CONFIG_$1="` ; then
			VAR=$(echo $1 | sed -e "s/^_//")
			VAL=`grep -e "export CONFIG_${VAR}=." "$3/rc.conf" | grep -m 1 -o -e "CONFIG_${VAR}=.*" | awk -F "[= ]" '{print $2}' | sed -e "s/\"//g"`
			eval "export $2=$VAL"
		else
			return 1
		fi
	else
		return 1
	fi

	return 0
}
#########################################################################
# Read values of HW specific variables from config file                 
#########################################################################

# Speedport/Sinus config
funct_read_config "DECT" "config_DECT" "${DST}/etc/init.d"
funct_read_config "USB_HOST_AVM" "config_USB_AVM" "${DST}/etc/init.d"
funct_read_config "USB_HOST" "config_USB" "${DST}/etc/init.d"
funct_read_config "AB_COUNT" "config_AB_COUNT" "${DST}/etc/init.d"
funct_read_config "ETH_COUNT" "config_ETH_COUNT" "${DST}/etc/init.d"
funct_read_config "CAPI_NT" "config_CAPI_NT" "${DST}/etc/init.d"
funct_read_config "CAPI_TE" "config_CAPI_TE" "${DST}/etc/init.d"

# FRITZ!Box config
funct_read_config "DECT" "source_DECT" "${SRC}/etc/init.d"
funct_read_config "USB_HOST_AVM" "source_USB_AVM" "${SRC}/etc/init.d"
funct_read_config "USB_HOST" "source_USB"  "${SRC}/etc/init.d"
funct_read_config "AB_COUNT" "source_AB_COUNT" "${SRC}/etc/init.d"
funct_read_config "ETH_COUNT" "source_ETH_COUNT" "${SRC}/etc/init.d"
funct_read_config "CAPI_NT" "source_CAPI_NT" "${SRC}/etc/init.d"
funct_read_config "CAPI_TE" "source_CAPI_TE" "${SRC}/etc/init.d"
funct_read_config "HOSTNAME" "source_HOSTNAME" "${SRC}/etc/init.d"
export source_HOSTNAME
echo "--------------------------------------------------------------------------------"
echo -e "HW Feature\t ${CLASS} W ${SPNUM}V \t ${SORCE_PRODUKT}"
echo "--------------------------------------------------------------------------------"

echo -n -e "DECT:     \t "
[ "${config_DECT}" = "y" ] && echo -n -e "detected     \t\t "
[ "${config_DECT}" = "n" ] && echo -n -e "not detected \t\t "
[ "${source_DECT}" = "y" ] && echo "detected"
[ "${source_DECT}" = "n" ] && echo "not detected"

echo -n -e "ISDN NT:  \t "
[ "${config_CAPI_NT}" = "y" ] && echo -n -e "detected     \t\t "
[ "${config_CAPI_NT}" = "n" ] && echo -n -e "not detected \t\t "
[ "${source_CAPI_NT}" = "y" ] && echo "detected"
[ "${source_CAPI_NT}" = "n" ] && echo "not detected"

echo -n -e "ISDN TE:  \t "
[ "${config_CAPI_TE}" = "y" ] && echo -n -e "detected     \t\t "
[ "${config_CAPI_TE}" = "n" ] && echo -n -e "not detected \t\t "
[ "${source_CAPI_TE}" = "y" ] && echo "detected"
[ "${source_CAPI_TE}" = "n" ] && echo "not detected"

echo -n -e "USB Port: \t "
[ "${config_USB}" = "y" ] && echo -n -e "2.0 detected \t\t "
 [ "${config_USB_AVM}" = "y" ] && echo -n -e    "1.0 detected \t\t "
( [ "${config_USB_AVM}" != "y" ] && [ "${config_USB}" != "y" ] ) && echo -n -e "not detected \t\t "
[ "${source_USB}" = "y" ] && echo "2.0 detected"
 [ "${source_USB_AVM}" = "y" ] && echo "1.0 detected"
( [ "${source_USB_AVM}" != "y" ] && [ "${source_USB}" != "y" ] ) && echo "not detected"


echo -e "a/b Ports:\t ${config_AB_COUNT} Port(s) \t\t ${source_AB_COUNT} Port(s)"

echo -e "eth Ports:\t ${config_ETH_COUNT} Port(s) \t\t ${source_ETH_COUNT} Port(s)"

echo "--------------------------------------------------------------------------------"










